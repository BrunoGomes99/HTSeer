{"version":3,"sources":["components/ListItems.js","components/Chart.js","components/Orders.js","components/TreeChart.js","components/LineChart.js","components/Actions.js","components/Dashboard.js","App.js","index.js"],"names":["mainListItems","ListItem","button","ListItemIcon","ListItemText","primary","createData","time","amount","undefined","id","date","name","shipTo","paymentMethod","TreeChart","option","tooltip","trigger","triggerOn","series","type","data","children","top","left","bottom","right","symbolSize","label","position","verticalAlign","align","fontSize","leaves","emphasis","focus","expandAndCollapse","animationDuration","animationDurationUpdate","Component","useStyles","makeStyles","theme","labelSliders","marginTop","valuetext","value","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","preProcessing","models","reconciliation","ActionsContent","classes","React","setValue","valuePercent","setValuePercent","valueForecast","setValueForecast","reconciliationOptions","setReconciliationOptions","modelOptions","setModelOptions","preProcessingOptions","setPreProcessingOptions","Paper","sx","p","display","flexDirection","Button","variant","size","startIcon","padding","Typography","gutterBottom","className","Slider","getAriaLabel","onChange","event","newValue","console","log","valueLabelDisplay","getAriaValueText","marks","min","max","step","FormControl","m","InputLabel","Select","labelId","multiple","target","split","input","OutlinedInput","renderValue","selected","join","map","MenuItem","Checkbox","checked","indexOf","Actions","Copyright","props","color","Link","href","Date","getFullYear","AppBar","styled","MuiAppBar","shouldForwardProp","prop","open","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","enteringScreen","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","spacing","breakpoints","up","mdTheme","createTheme","DashboardContent","setOpen","toggleDrawer","ThemeProvider","Box","CssBaseline","Toolbar","pr","IconButton","edge","aria-label","onClick","marginRight","component","noWrap","flexGrow","Badge","badgeContent","alignItems","justifyContent","px","Divider","List","backgroundColor","palette","mode","grey","height","overflow","Container","maxWidth","mt","mb","Grid","container","item","xs","md","lg","pt","Dashboard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.823bbaaf.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\r\nimport PeopleIcon from '@mui/icons-material/People';\r\nimport BarChartIcon from '@mui/icons-material/BarChart';\r\nimport LayersIcon from '@mui/icons-material/Layers';\r\nimport AssignmentIcon from '@mui/icons-material/Assignment';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\n\r\nexport const mainListItems = (\r\n  <div>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <HomeIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Home\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <AddCircleOutlineIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Novo modelo preditivo\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <BarChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Visualizar predições\" />\r\n    </ListItem>\r\n  </div>\r\n);\r\n\r\n// export const secondaryListItems = (\r\n//   <div>\r\n//     <ListSubheader inset>Saved reports</ListSubheader>\r\n//     <ListItem button>\r\n//       <ListItemIcon>\r\n//         <AssignmentIcon />\r\n//       </ListItemIcon>\r\n//       <ListItemText primary=\"Current month\" />\r\n//     </ListItem>\r\n//     <ListItem button>\r\n//       <ListItemIcon>\r\n//         <AssignmentIcon />\r\n//       </ListItemIcon>\r\n//       <ListItemText primary=\"Last quarter\" />\r\n//     </ListItem>\r\n//     <ListItem button>\r\n//       <ListItemIcon>\r\n//         <AssignmentIcon />\r\n//       </ListItemIcon>\r\n//       <ListItemText primary=\"Year-end sale\" />\r\n//     </ListItem>\r\n//   </div>\r\n// );","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\nimport Title from './Title';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n  return { time, amount };\r\n}\r\n\r\nconst data = [\r\n  createData('00:00', 0),\r\n  createData('03:00', 300),\r\n  createData('06:00', 600),\r\n  createData('09:00', 800),\r\n  createData('12:00', 1500),\r\n  createData('15:00', 2000),\r\n  createData('18:00', 2400),\r\n  createData('21:00', 2400),\r\n  createData('24:00', undefined),\r\n];\r\n\r\nexport default function Chart() {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Today</Title>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis\r\n            dataKey=\"time\"\r\n            stroke={theme.palette.text.secondary}\r\n            style={theme.typography.body2}\r\n          />\r\n          <YAxis\r\n            stroke={theme.palette.text.secondary}\r\n            style={theme.typography.body2}\r\n          >\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{\r\n                textAnchor: 'middle',\r\n                fill: theme.palette.text.primary,\r\n                ...theme.typography.body1,\r\n              }}\r\n            >\r\n              Sales ($)\r\n            </Label>\r\n          </YAxis>\r\n          <Line\r\n            isAnimationActive={false}\r\n            type=\"monotone\"\r\n            dataKey=\"amount\"\r\n            stroke={theme.palette.primary.main}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </React.Fragment>\r\n  );\r\n}","import * as React from 'react';\r\nimport Link from '@mui/material/Link';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Title from './Title';\r\n\r\n// Generate Order Data\r\nfunction createData(id, date, name, shipTo, paymentMethod, amount) {\r\n  return { id, date, name, shipTo, paymentMethod, amount };\r\n}\r\n\r\nconst rows = [\r\n  createData(\r\n    0,\r\n    '16 Mar, 2019',\r\n    'Elvis Presley',\r\n    'Tupelo, MS',\r\n    'VISA ⠀•••• 3719',\r\n    312.44,\r\n  ),\r\n  createData(\r\n    1,\r\n    '16 Mar, 2019',\r\n    'Paul McCartney',\r\n    'London, UK',\r\n    'VISA ⠀•••• 2574',\r\n    866.99,\r\n  ),\r\n  createData(2, '16 Mar, 2019', 'Tom Scholz', 'Boston, MA', 'MC ⠀•••• 1253', 100.81),\r\n  createData(\r\n    3,\r\n    '16 Mar, 2019',\r\n    'Michael Jackson',\r\n    'Gary, IN',\r\n    'AMEX ⠀•••• 2000',\r\n    654.39,\r\n  ),\r\n  createData(\r\n    4,\r\n    '15 Mar, 2019',\r\n    'Bruce Springsteen',\r\n    'Long Branch, NJ',\r\n    'VISA ⠀•••• 5919',\r\n    212.79,\r\n  ),\r\n];\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nexport default function Orders() {\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Recent Orders</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date</TableCell>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Ship To</TableCell>\r\n            <TableCell>Payment Method</TableCell>\r\n            <TableCell align=\"right\">Sale Amount</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell>{row.date}</TableCell>\r\n              <TableCell>{row.name}</TableCell>\r\n              <TableCell>{row.shipTo}</TableCell>\r\n              <TableCell>{row.paymentMethod}</TableCell>\r\n              <TableCell align=\"right\">{`$${row.amount}`}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <Link color=\"primary\" href=\"#\" onClick={preventDefault} sx={{ mt: 3 }}>\r\n        See more orders\r\n      </Link>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nclass TreeChart extends Component {\r\n    render() {\r\n        return (\r\n            <ReactEcharts\r\n                option={{\r\n                    tooltip: {\r\n                        trigger: 'item',\r\n                        triggerOn: 'mousemove'\r\n                    },\r\n                    series: [\r\n                        {\r\n                            type: 'tree',\r\n                            data: [\r\n                                {\r\n                                    name: \"states\",\r\n                                    children: [\r\n                                        {\r\n                                            name: \"CA\",\r\n                                            children: [\r\n                                                {\r\n                                                    name: \"CA_1\",\r\n                                                    children: [\r\n                                                        { name: \"CA_1_HOBBIES\" },\r\n                                                        { name: \"CA_1_HOUSEHOLD\" },\r\n                                                        { name: \"CA_1_FOODS\" }\r\n                                                    ]\r\n                                                },\r\n                                                { name: \"CA_2\" },\r\n                                                { name: \"CA_3\" },\r\n                                                { name: \"CA_4\" }\r\n                                            ]\r\n                                        },\r\n                                        {\r\n                                            name: \"TX\",\r\n                                            children: [\r\n                                                { name: \"TX_1\" }, { name: \"TX_2\" }, { name: \"TX_3\" }\r\n                                            ]\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ],\r\n                            top: '1%',\r\n                            left: '7%',\r\n                            bottom: '1%',\r\n                            right: '20%',\r\n                            symbolSize: 7,\r\n                            label: {\r\n                                position: 'left',\r\n                                verticalAlign: 'middle',\r\n                                align: 'right',\r\n                                fontSize: 9\r\n                            },\r\n                            leaves: {\r\n                                label: {\r\n                                    position: 'right',\r\n                                    verticalAlign: 'middle',\r\n                                    align: 'left'\r\n                                }\r\n                            },\r\n                            emphasis: {\r\n                                focus: 'descendant'\r\n                            },\r\n                            expandAndCollapse: true,\r\n                            animationDuration: 550,\r\n                            animationDurationUpdate: 750\r\n                        }\r\n                    ]\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\nexport default TreeChart;","import React, { Component } from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nclass LineChart extends Component {\r\n    render() {\r\n        const colors = ['#5470C6', '#EE6666'];\r\n        return (\r\n            <ReactEcharts\r\n                option={{\r\n                    color: colors,\r\n                    tooltip: {\r\n                        trigger: 'none',\r\n                        axisPointer: {\r\n                            type: 'cross'\r\n                        }\r\n                    },\r\n                    legend: {},\r\n                    grid: {\r\n                        top: 70,\r\n                        bottom: 50\r\n                    },\r\n                    xAxis: [\r\n                        {\r\n                            type: 'category',\r\n                            axisTick: {\r\n                                alignWithLabel: true\r\n                            },\r\n                            axisLine: {\r\n                                onZero: false,\r\n                                lineStyle: {\r\n                                    color: colors[1]\r\n                                }\r\n                            },\r\n                            axisPointer: {\r\n                                label: {\r\n                                    formatter: function (params) {\r\n                                        return (\r\n                                            'Precipitation  ' +\r\n                                            params.value +\r\n                                            (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                                        );\r\n                                    }\r\n                                }\r\n                            },\r\n                            data: ['2016-1', '2016-2', '2016-3', '2016-4', '2016-5', '2016-6', '2016-7', '2016-8', '2016-9', '2016-10', '2016-11', '2016-12']\r\n                        },\r\n                        {\r\n                            type: 'category',\r\n                            axisTick: {\r\n                                alignWithLabel: true\r\n                            },\r\n                            axisLine: {\r\n                                onZero: false,\r\n                                lineStyle: {\r\n                                    color: colors[0]\r\n                                }\r\n                            },\r\n                            axisPointer: {\r\n                                label: {\r\n                                    formatter: function (params) {\r\n                                        return (\r\n                                            'Precipitation  ' +\r\n                                            params.value +\r\n                                            (params.seriesData.length ? '：' + params.seriesData[0].data : '')\r\n                                        );\r\n                                    }\r\n                                }\r\n                            },\r\n                            data: ['2015-1', '2015-2', '2015-3', '2015-4', '2015-5', '2015-6', '2015-7', '2015-8', '2015-9', '2015-10', '2015-11', '2015-12']\r\n                        }\r\n                    ],\r\n                    yAxis: [\r\n                        {\r\n                            type: 'value'\r\n                        }\r\n                    ],\r\n                    series: [\r\n                        {\r\n                            name: 'Precipitation(2015)',\r\n                            type: 'line',\r\n                            xAxisIndex: 1,\r\n                            smooth: true,\r\n                            emphasis: {\r\n                                focus: 'series'\r\n                            },\r\n                            data: [\r\n                                2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3\r\n                            ]\r\n                        },\r\n                        {\r\n                            name: 'Precipitation(2016)',\r\n                            type: 'line',\r\n                            smooth: true,\r\n                            emphasis: {\r\n                                focus: 'series'\r\n                            },\r\n                            data: [\r\n                                3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7\r\n                            ]\r\n                        }\r\n                    ]\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\nexport default LineChart;","import * as React from 'react';\r\nimport FileDownloadIcon from '@mui/icons-material/FileDownload';\r\nimport { Button, Slider, Select, MenuItem, FormControl, InputLabel, FormHelperText, Typography, Paper } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\n\r\n\r\nimport ListItemText from '@mui/material/ListItemText';\r\n\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport DropDown from './DropDown';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    labelSliders: {\r\n        marginTop: \"15px\"\r\n    },\r\n}));\r\n\r\nfunction valuetext(value) {\r\n    return `${value}`;\r\n}\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nconst preProcessing = [\r\n    'Todos',\r\n    'Normalização',\r\n    'Modelagem de feriados',\r\n    'Adição de variáveis exógenas'\r\n]\r\n\r\nconst models = [\r\n    'Todos',\r\n    'Auto-Arima',\r\n    'Amortecimento Exponencial',\r\n    'Prophet'\r\n]\r\n\r\nconst reconciliation = [\r\n    'Todos',\r\n    'Ordinary Least Squares',\r\n    'Structurally Weighted Least Squares',\r\n    'Variance Weighted Least Squares',\r\n    'Forcasted Proportions',\r\n    'Proportions of Historical Averages',\r\n    'Average Historical Proportions',\r\n    'Bottom-up',\r\n];\r\n\r\nfunction ActionsContent() {\r\n    const classes = useStyles();\r\n\r\n    const [value, setValue] = React.useState([2011, 2012]);\r\n    const [valuePercent, setValuePercent] = React.useState(80);\r\n    const [valueForecast, setValueForecast] = React.useState(28);\r\n    const [age, setAge] = React.useState('');\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        console.log(newValue);\r\n    };\r\n\r\n    const handleChangePercent = (event, newValue) => {\r\n        setValuePercent(newValue)\r\n    };\r\n\r\n    const handleChangeForecast = (event, newValue) => {\r\n        setValueForecast(newValue)\r\n    };\r\n\r\n    const handleChangeProcess = (event) => {\r\n        setAge(event.target.value);\r\n    };\r\n    const [reconciliationOptions, setReconciliationOptions] = React.useState([]);\r\n\r\n    const handleChangeReconciliation = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setReconciliationOptions(\r\n            typeof value === 'string' ? value.split(',') : value,\r\n        );\r\n    };\r\n\r\n    const [modelOptions, setModelOptions] = React.useState([]);\r\n\r\n    const handleChangeModel = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setModelOptions(\r\n            typeof value === 'string' ? value.split(',') : value,\r\n        );\r\n    };\r\n\r\n\r\n    const [preProcessingOptions, setPreProcessingOptions] = React.useState([]);\r\n\r\n    const handleChangePreProcessing = (event) => {\r\n        const {\r\n            target: { value },\r\n        } = event;\r\n        setPreProcessingOptions(\r\n            typeof value === 'string' ? value.split(',') : value,\r\n        );\r\n    };\r\n\r\n\r\n    return (\r\n        <Paper\r\n            sx={{\r\n                p: 2,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n            <Button variant=\"outlined\" size=\"small\" startIcon={<FileDownloadIcon />} padding=\"10px\">\r\n                Importação dos dados\r\n            </Button>\r\n            <Typography variant=\"subtitle2\" gutterBottom className={classes.labelSliders}>\r\n                Recorte de dados temporais: {value[0] + \" - \" + value[1]}\r\n            </Typography>\r\n            <Slider\r\n                getAriaLabel={() => 'Time range'}\r\n                value={value}\r\n                onChange={handleChange}\r\n                valueLabelDisplay=\"auto\"\r\n                getAriaValueText={valuetext}\r\n                marks\r\n                size=\"small\"\r\n                min={2010}\r\n                max={2017}\r\n            />\r\n            <Typography variant=\"subtitle2\" gutterBottom className={classes.labelSliders}>\r\n                Percentual de Treinamento: {valuePercent + \"%\"}\r\n            </Typography>\r\n            <Slider\r\n                getAriaLabel={() => 'Train percent'}\r\n                value={valuePercent}\r\n                onChange={handleChangePercent}\r\n                valueLabelDisplay=\"auto\"\r\n                getAriaValueText={valuetext}\r\n                step={10}\r\n                size=\"small\"\r\n                marks\r\n            // valueLabelDisplay=\"on\"\r\n            />\r\n            <FormControl sx={{ m: 1, width: 300 }}>\r\n                <InputLabel id=\"demo-multiple-checkbox-label\">Pré-processamento de dados</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-multiple-checkbox-label\"\r\n                    id=\"demo-multiple-checkbox\"\r\n                    multiple\r\n                    value={preProcessingOptions}\r\n                    onChange={handleChangePreProcessing}\r\n                    input={<OutlinedInput label=\"Pré-processamento de dados\" />}\r\n                    renderValue={(selected) => selected.join(', ')}\r\n                    MenuProps={MenuProps}\r\n                >\r\n                    {preProcessing.map((name) => (\r\n                        <MenuItem key={name} value={name}>\r\n                            <Checkbox checked={preProcessingOptions.indexOf(name) > -1} />\r\n                            <ListItemText primary={name} />\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl sx={{ m: 1, width: 300 }}>\r\n                <InputLabel id=\"demo-multiple-checkbox-label\">Seleção de modelos</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-multiple-checkbox-label\"\r\n                    id=\"demo-multiple-checkbox\"\r\n                    multiple\r\n                    value={modelOptions}\r\n                    onChange={handleChangeModel}\r\n                    input={<OutlinedInput label=\"Seleção de modelos\" />}\r\n                    renderValue={(selected) => selected.join(', ')}\r\n                    MenuProps={MenuProps}\r\n                >\r\n                    {models.map((name) => (\r\n                        <MenuItem key={name} value={name}>\r\n                            <Checkbox checked={modelOptions.indexOf(name) > -1} />\r\n                            <ListItemText primary={name} />\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl sx={{ m: 1, width: 300 }}>\r\n                <InputLabel id=\"demo-multiple-checkbox-label\">Técnicas de reconciliação</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-multiple-checkbox-label\"\r\n                    id=\"demo-multiple-checkbox\"\r\n                    multiple\r\n                    value={reconciliationOptions}\r\n                    onChange={handleChangeReconciliation}\r\n                    input={<OutlinedInput label=\"Técnicas de reconciliação\" />}\r\n                    renderValue={(selected) => selected.join(', ')}\r\n                    MenuProps={MenuProps}\r\n                >\r\n                    {reconciliation.map((name) => (\r\n                        <MenuItem key={name} value={name}>\r\n                            <Checkbox checked={reconciliationOptions.indexOf(name) > -1} />\r\n                            <ListItemText primary={name} />\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            <Typography variant=\"subtitle2\" gutterBottom className={classes.labelSliders}>\r\n                Números de dias para previsão: {valueForecast}\r\n            </Typography>\r\n            <Slider\r\n                getAriaLabel={() => 'Forecast days'}\r\n                value={valueForecast}\r\n                onChange={handleChangeForecast}\r\n                valueLabelDisplay=\"auto\"\r\n                getAriaValueText={valuetext}\r\n                step={1}\r\n                size=\"small\"\r\n                marks\r\n                min={1}\r\n                max={28}\r\n            // valueLabelDisplay=\"on\"\r\n            />\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default function Actions() {\r\n    return <ActionsContent />;\r\n}","import * as React from 'react';\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport Box from '@mui/material/Box';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Badge from '@mui/material/Badge';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Link from '@mui/material/Link';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport NotificationsIcon from '@mui/icons-material/Notifications';\r\nimport { mainListItems, secondaryListItems } from './ListItems';\r\nimport Chart from './Chart';\r\nimport Deposits from './Deposits';\r\nimport Orders from './Orders';\r\nimport TreeChart from './TreeChart';\r\nimport LineChart  from './LineChart';\r\nimport Actions from './Actions';\r\nimport {Button, Stack} from '@mui/material'\r\n\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://mui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    '& .MuiDrawer-paper': {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      boxSizing: 'border-box',\r\n      ...(!open && {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: theme.spacing(9),\r\n        },\r\n      }),\r\n    },\r\n  }),\r\n);\r\n\r\nconst mdTheme = createTheme();\r\n\r\nfunction DashboardContent() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={mdTheme}>\r\n      <Box sx={{ display: 'flex' }}>\r\n        <CssBaseline />\r\n        <AppBar position=\"absolute\" open={open}>\r\n          <Toolbar\r\n            sx={{\r\n              pr: '24px', // keep right padding when drawer closed\r\n            }}\r\n          >\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={toggleDrawer}\r\n              sx={{\r\n                marginRight: '36px',\r\n                ...(open && { display: 'none' }),\r\n              }}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography\r\n              component=\"h1\"\r\n              variant=\"h6\"\r\n              color=\"inherit\"\r\n              noWrap\r\n              sx={{ flexGrow: 1 }}\r\n            >\r\n              HTSeer\r\n            </Typography>\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={4} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer variant=\"permanent\" open={open}>\r\n          <Toolbar\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-end',\r\n              px: [1],\r\n            }}\r\n          >\r\n            <IconButton onClick={toggleDrawer}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n          <Divider />\r\n          <List>{mainListItems}</List>\r\n          <Divider />\r\n          {/* <List>{secondaryListItems}</List> */}\r\n        </Drawer>\r\n        <Box\r\n          component=\"main\"\r\n          sx={{\r\n            backgroundColor: (theme) =>\r\n              theme.palette.mode === 'light'\r\n                ? theme.palette.grey[100]\r\n                : theme.palette.grey[900],\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto',\r\n          }}\r\n        >\r\n          <Toolbar />\r\n          \r\n            \r\n          <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>  \r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={5} lg={4}>\r\n                <Actions />\r\n              </Grid>\r\n              <Grid item xs={12} md={7} lg={8}>\r\n                <Paper\r\n                  sx={{\r\n                    p: 2,\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    // height: 240,\r\n                  }}\r\n                >\r\n                  <TreeChart />\r\n                </Paper>\r\n                 {/* <Paper\r\n                  sx={{\r\n                    p: 2,\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    // height: 240,\r\n                  }}\r\n                >\r\n                \r\n                  <Button variant=\"outlined\" size=\"small\" padding=\"10px\">\r\n                    Carregar\r\n                  </Button>\r\n                  <Button variant=\"outlined\" size=\"small\" padding=\"10px\">\r\n                    Salvar\r\n                  </Button>\r\n                  <Button variant=\"outlined\" size=\"small\" padding=\"10px\">\r\n                    Executar\r\n                  </Button>\r\n                 </Paper> */}\r\n              </Grid>\r\n              {/* Recent Deposits */}\r\n              {/* <Grid item xs={12} md={4} lg={3}>\r\n                <Paper\r\n                  sx={{\r\n                    p: 2,\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    height: 240,\r\n                  }}\r\n                >\r\n                  <Deposits />\r\n                </Paper>\r\n              </Grid> */}\r\n              {/* <Grid item xs={12}>\r\n                <Paper\r\n                  sx={{\r\n                    p: 2,\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    height: 240,\r\n                  }}\r\n                >\r\n                  <LineChart />\r\n                </Paper>\r\n              </Grid> */}\r\n              {/* Recent Orders */}\r\n              {/* <Grid item xs={12}>\r\n                <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n                  <Orders />\r\n                </Paper>\r\n              </Grid> */}\r\n            </Grid>\r\n            <Copyright sx={{ pt: 4 }} />\r\n          </Container>\r\n        </Box>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default function Dashboard() {\r\n  return <DashboardContent />;\r\n}","import Dashboard from './components/Dashboard';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Dashboard/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}